system: You are a system for returning new nxyt browser lisp functions for nyxt browser v3. Always reply with a compatible lisp function (BE CAREFUL).
prompt: |
    user:Command to send selection to named pipe

    assistant:(define-command-global pipe-selection ()
    "Send selection to named pipe"
    (let ((selection (ps-eval (ps:chain window (get-selection) (to-string)))))
        (uiop:launch-program (list "sh" "-c" (concatenate 'string "echo " "'" selection "'" " > /tmp/nyxt_selection_pipe")))))


    user:Send url, title and selection to new linux pipe

    assistant:(define-command-global pipe-selection-title-url-new ()
    "Sends url, title and selection to new gh issue"
    (let* ((title (title (current-buffer)))
            (myurl (url (current-buffer)))
            (selection (ps-eval (ps:chain window (get-selection) (to-string))))
            (pipe-title "/tmp/nyxt_title")
            (pipe-url "/tmp/nyxt_url")
            (pipe-selection "/tmp/nyxt_selection"))
        (with-open-file (stream pipe-title
                            :direction :output
                            :if-exists :supersede
                            :if-does-not-exist :create)
        (write-string title stream))
        (with-open-file (stream pipe-url
                            :direction :output
                            :if-exists :supersede
                            :if-does-not-exist :create)
        (write-string (render-url myurl) stream))
        (with-open-file (stream pipe-selection
                            :direction :output
                            :if-exists :supersede
                            :if-does-not-exist :create)
        (write-string selection stream))))


    user:Return the list of tags of the bookmark corresponding to URL.

    assistant:(defun url-bookmark-tags (url)
    "Return the list of tags of the bookmark corresponding to URL."
    (let ((bookmarks (files:content (bookmarks-file (current-buffer)))))
    (alexandria:when-let ((existing
                           (find url bookmarks :key #'url :test #'url-equal)))
      (tags existing))))


    user:Function to summarize the current buffer by creating a new summary buffer.
    SUMMARY-LENGTH allows to list more/less summary items.

    assistant:(define-command-global summarize-buffer
    (&key (summary-length 5) (buffer (current-buffer)))
    "Summarize the current buffer by creating a new summary buffer.
    SUMMARY-LENGTH allows to list more/less summary items."
    (buffer-load-internal-page-focus 'summarize-buffer :summary-length
                                    summary-length :id (id buffer)))


    user:Command to inspect a mode and show it in a help buffer.

    assistant:(define-command-global describe-mode
    (&key (mode (prompt1 :prompt "Describe mode" :sources 'mode-source)))
    "Inspect a mode and show it in a help buffer."
    (when mode (describe-class :class mode)))

    user: Function to spell check a word.

    assistant:(define-command spell-check-word
        (&key (word nil word-supplied-p))
    "Spell check a word."
    (let ((word
            (or (and word-supplied-p word)
                (prompt1 :prompt "Spell check word" :sources
                        'prompter:raw-source))))
        (if (spell-dict-check-p word)
            (echo "~s is spelled correctly." word)
            (echo "~s is NOT correctly spelled." word))))


    user:Prompt for element hints and bookmark them.

    assistant:(define-command bookmark-hint
    nil
    "Prompt for element hints and bookmark them."
    (nyxt/mode/hint:query-hints "Bookmark hint"
                                (lambda (result)
                                    (dolist (url (mapcar #'url result))
                                    (let ((tags
                                            (prompt :prompt "Tag(s)" :sources
                                                    (list
                                                    (make-instance
                                                    'prompter:word-source :name
                                                    "New tags" :enable-marks-p
                                                    t)
                                                    (make-instance 'tag-source
                                                                    :marks
                                                                    (url-bookmark-tags
                                                                    url))))))
                                        (bookmark-add url :tags tags :title
                                                    (fetch-url-title url)))))
                                :selector "a"))


    user:$input

    assistant:
